#! /usr/bin/env kuroko
#
# SPDX-License-Identifier: MIT
#

from fileio import stdin

let rows = 0
let cols = 0
let obstacles = set()
let xstart = 0
let ystart = 0

for line in stdin.readlines():
	line = line.strip()
	if cols != 0:
		assert cols == len(line)
	else:
		cols = len(line)
	for col, ch in enumerate(line):
		if ch == '#':
			obstacles.add((col, rows))
		elif ch == '^':
			xstart = col
			ystart = rows
	rows += 1

print("Map has", rows, "rows,", cols, "columns,", len(obstacles), "obstacles")
print("Guard starts at row", ystart, "column", xstart)

let turn = {'^':'>', '>':'v', 'v':'<', '<':'^'}

def walk(checkloop=False):
	let visited = set()
	let visitedAndDir = set()
	let d = '^'
	let x = xstart
	let y = ystart

	while True:
		if checkloop and (x, y, d) in visitedAndDir:
			return visited, True

		visited.add((x, y))
		visitedAndDir.add((x, y, d))

		let nx = x
		let ny = y

		if d == '^':
			ny -= 1
			if ny < 0:
				break
		elif d == '<':
			nx -= 1
			if nx < 0:
				break
		elif d == '>':
			nx += 1
			if nx >= cols:
				break
		elif d == 'v':
			ny += 1
			if ny >= rows:
				break

		if (nx, ny) in obstacles:
			d = turn[d]
			continue

		x = nx
		y = ny

	return visited, False

let numLoopObstacles = 0
for y in range(rows):
	for x in range(cols):
		if (x, y) == (xstart, ystart):
			continue
		if (x, y) in obstacles:
			continue
		obstacles.add((x, y))
		let _, looped = walk(True)
		if looped:
			numLoopObstacles += 1
		obstacles.remove((x, y))


print("Part 1:", len(walk()[0]))
print("Part 2:", numLoopObstacles)
